; ModuleID = 'gcd'
source_filename = "gcd"

declare i32 @writeln(i32)

declare i32 @write_str(i8*)

declare i32 @readln(i32*)

define i32 @gcdi(i32 %a, i32 %b) {
entry:
  %return_store = alloca i32, align 4
  %a_store = alloca i32, align 4
  store i32 %a, i32* %a_store, align 4
  %b_store = alloca i32, align 4
  store i32 %b, i32* %b_store, align 4
  %tmp_store = alloca i32, align 4
  br label %cond

cond:                                             ; preds = %body, %entry
  %load_var = load i32, i32* %b_store, align 4
  %ne_tmp = icmp ne i32 %load_var, 0
  %if_cond = icmp ne i1 %ne_tmp, false
  br i1 %if_cond, label %body, label %after

body:                                             ; preds = %cond
  %load_var1 = load i32, i32* %b_store, align 4
  store i32 %load_var1, i32* %tmp_store, align 4
  %load_var2 = load i32, i32* %a_store, align 4
  %load_var3 = load i32, i32* %b_store, align 4
  %rem_tmp = srem i32 %load_var2, %load_var3
  store i32 %rem_tmp, i32* %b_store, align 4
  %load_var4 = load i32, i32* %tmp_store, align 4
  store i32 %load_var4, i32* %a_store, align 4
  br label %cond

after:                                            ; preds = %cond
  %load_var5 = load i32, i32* %a_store, align 4
  store i32 %load_var5, i32* %return_store, align 4
  %return_value = load i32, i32* %return_store, align 4
  ret i32 %return_value
}

define i32 @gcdr(i32 %a, i32 %b) {
entry:
  %return_store = alloca i32, align 4
  %a_store = alloca i32, align 4
  store i32 %a, i32* %a_store, align 4
  %b_store = alloca i32, align 4
  store i32 %b, i32* %b_store, align 4
  %tmp_store = alloca i32, align 4
  %load_var = load i32, i32* %a_store, align 4
  %load_var1 = load i32, i32* %b_store, align 4
  %rem_tmp = srem i32 %load_var, %load_var1
  store i32 %rem_tmp, i32* %tmp_store, align 4
  %load_var2 = load i32, i32* %tmp_store, align 4
  %eq_tmp = icmp eq i32 %load_var2, 0
  %if_cond = icmp ne i1 %eq_tmp, false
  br i1 %if_cond, label %body, label %else

body:                                             ; preds = %entry
  %load_var3 = load i32, i32* %b_store, align 4
  store i32 %load_var3, i32* %return_store, align 4
  %return_value = load i32, i32* %return_store, align 4
  ret i32 %return_value
  br label %after

else:                                             ; preds = %entry
  br label %after

after:                                            ; preds = %else, %body
  %load_var4 = load i32, i32* %b_store, align 4
  %load_var5 = load i32, i32* %tmp_store, align 4
  %call_tmp = call i32 @gcdr(i32 %load_var4, i32 %load_var5)
  store i32 %call_tmp, i32* %return_store, align 4
  %return_value6 = load i32, i32* %return_store, align 4
  ret i32 %return_value6
}

define i32 @gcdr_guessing(i32 %a, i32 %b) {
entry:
  %return_store = alloca i32, align 4
  %a_store = alloca i32, align 4
  store i32 %a, i32* %a_store, align 4
  %b_store = alloca i32, align 4
  store i32 %b, i32* %b_store, align 4
  %load_var = load i32, i32* %a_store, align 4
  %load_var1 = load i32, i32* %b_store, align 4
  %load_var2 = load i32, i32* %b_store, align 4
  %call_tmp = call i32 @gcdr_guessing_inner(i32 %load_var, i32 %load_var1, i32 %load_var2)
  store i32 %call_tmp, i32* %return_store, align 4
  %return_value = load i32, i32* %return_store, align 4
  ret i32 %return_value
}

define i32 @gcdr_guessing_inner(i32 %a, i32 %b, i32 %c) {
entry:
  %return_store = alloca i32, align 4
  %a_store = alloca i32, align 4
  store i32 %a, i32* %a_store, align 4
  %b_store = alloca i32, align 4
  store i32 %b, i32* %b_store, align 4
  %c_store = alloca i32, align 4
  store i32 %c, i32* %c_store, align 4
  %load_var = load i32, i32* %a_store, align 4
  %load_var1 = load i32, i32* %c_store, align 4
  %rem_tmp = srem i32 %load_var, %load_var1
  %eq_tmp = icmp eq i32 %rem_tmp, 0
  %load_var2 = load i32, i32* %b_store, align 4
  %load_var3 = load i32, i32* %c_store, align 4
  %rem_tmp4 = srem i32 %load_var2, %load_var3
  %eq_tmp5 = icmp eq i32 %rem_tmp4, 0
  %and_tmp = and i1 %eq_tmp, %eq_tmp5
  %if_cond = icmp ne i1 %and_tmp, false
  br i1 %if_cond, label %body, label %else

body:                                             ; preds = %entry
  %load_var6 = load i32, i32* %c_store, align 4
  store i32 %load_var6, i32* %return_store, align 4
  %return_value = load i32, i32* %return_store, align 4
  ret i32 %return_value
  br label %after

else:                                             ; preds = %entry
  br label %after

after:                                            ; preds = %else, %body
  %load_var7 = load i32, i32* %a_store, align 4
  %load_var8 = load i32, i32* %b_store, align 4
  %load_var9 = load i32, i32* %c_store, align 4
  %sub_tmp = sub i32 %load_var9, 1
  %call_tmp = call i32 @gcdr_guessing_inner(i32 %load_var7, i32 %load_var8, i32 %sub_tmp)
  store i32 %call_tmp, i32* %return_store, align 4
  %return_value10 = load i32, i32* %return_store, align 4
  ret i32 %return_value10
}

define i32 @main() {
entry:
  %call_tmp = call i32 @gcdi(i32 54, i32 81)
  %call_tmp1 = call i32 @writeln(i32 %call_tmp)
  %call_tmp2 = call i32 @gcdr(i32 54, i32 81)
  %call_tmp3 = call i32 @writeln(i32 %call_tmp2)
  %call_tmp4 = call i32 @gcdr_guessing(i32 54, i32 81)
  %call_tmp5 = call i32 @writeln(i32 %call_tmp4)
  %call_tmp6 = call i32 @gcdi(i32 5, i32 7)
  %call_tmp7 = call i32 @writeln(i32 %call_tmp6)
  %call_tmp8 = call i32 @gcdr(i32 5, i32 7)
  %call_tmp9 = call i32 @writeln(i32 %call_tmp8)
  %call_tmp10 = call i32 @gcdr_guessing(i32 5, i32 7)
  %call_tmp11 = call i32 @writeln(i32 %call_tmp10)
  %call_tmp12 = call i32 @gcdi(i32 4, i32 12)
  %call_tmp13 = call i32 @writeln(i32 %call_tmp12)
  %call_tmp14 = call i32 @gcdr(i32 4, i32 12)
  %call_tmp15 = call i32 @writeln(i32 %call_tmp14)
  %call_tmp16 = call i32 @gcdr_guessing(i32 4, i32 12)
  %call_tmp17 = call i32 @writeln(i32 %call_tmp16)
  %call_tmp18 = call i32 @gcdi(i32 8, i32 12)
  %call_tmp19 = call i32 @writeln(i32 %call_tmp18)
  %call_tmp20 = call i32 @gcdr(i32 8, i32 12)
  %call_tmp21 = call i32 @writeln(i32 %call_tmp20)
  %call_tmp22 = call i32 @gcdr_guessing(i32 8, i32 12)
  %call_tmp23 = call i32 @writeln(i32 %call_tmp22)
  ret i32 0
}
