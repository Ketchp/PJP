; ModuleID = 'factorialCycle'
source_filename = "factorialCycle"

@f = common global i32 0
@n = common global i32 0

declare i32 @writeln(i32)

declare i32 @write_str(i8*)

declare i32 @readln(i32*)

define i32 @main() {
entry:
  store i32 1, i32* @f, align 4
  %call_tmp = call i32 @readln(i32* @n)
  br label %cond

cond:                                             ; preds = %body, %entry
  %load_global = load i32, i32* @n, align 4
  %ge_tmp = icmp sge i32 %load_global, 2
  %if_cond = icmp ne i1 %ge_tmp, false
  br i1 %if_cond, label %body, label %after

body:                                             ; preds = %cond
  %load_global1 = load i32, i32* @f, align 4
  %load_global2 = load i32, i32* @n, align 4
  %mul_tmp = mul i32 %load_global1, %load_global2
  store i32 %mul_tmp, i32* @f, align 4
  %dec_load = load i32, i32* @n, align 4
  %dec = sub i32 %dec_load, 1
  store volatile i32 %dec, i32* @n, align 4
  br label %cond

after:                                            ; preds = %cond
  %load_global3 = load i32, i32* @f, align 4
  %call_tmp4 = call i32 @writeln(i32 %load_global3)
  ret i32 0
}
